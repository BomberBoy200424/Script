local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Trident ðŸ”± Factory", "BloodTheme")
    local Tab = Window:NewTab("Main")
        local Section = Tab:NewSection("Main")
        
        
                Section:NewButton("Anti AFK", "ButtonInfo", function()

	local vu = game:GetService("VirtualUser")
	print("Good!")
	game:GetService("Players").LocalPlayer.Idled:connect(function()
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	end)
end) 


        Section:NewButton("Always Day", "ButtonInfo", function()
	game.Lighting.Changed:Connect(function()
	game.Lighting.TimeOfDay = "12:00"
	game.Lighting.Ambient = Color3.fromRGB(255,255,255)
	game.Lighting.Brightness = .5
	game.Lighting.FogEnd = 50000
	end)
end)


Section:NewButton("Build Tools", "ButtonInfo", function()
for i,v in pairs(game:GetService("ReplicatedStorage").Purchasables.Structures.BlueprintStructures:GetChildren()) do
		if v.ClassName == "Folder" then
			local Blueprint = v:Clone()
			Blueprint.Parent = game:GetService("Players").LocalPlayer.PlayerBlueprints.Blueprints
		end
	end
	local PlayerService = game:GetService("Players")
	local LocalPlayer = PlayerService.LocalPlayer
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local BlueprintRestoreTool = Instance.new("Tool", LocalPlayer.Backpack)
	BlueprintRestoreTool.Name = "Restore\n Blueprint"
	BlueprintRestoreTool.CanBeDropped = false
	BlueprintRestoreTool.RequiresHandle = false

	local SelectedStructure = nil
	BlueprintRestoreToolEquipped = BlueprintRestoreTool.Equipped:Connect(function()
		local Mouse = LocalPlayer:GetMouse()

		BlueprintRestore = Mouse.Button1Down:Connect(function(key)

			local target = Mouse.Target
			if (target == nil) then
				return
			end

			local Parent = target.Parent
			local Type = Parent:FindFirstChild("Type")

			if (Type ~= nil and Type.Value == "Structure" or Type.Value == "Furniture") then
				SelectedStructure = Parent

				local ItemName = SelectedStructure:FindFirstChild("ItemName")
				local MainCFrame = SelectedStructure:FindFirstChild("MainCFrame")
				if (ItemName ~= nil and MainCFrame ~= nil) then
					local BlueprintType = ItemName.Value
					local Position = MainCFrame.Value

					if (BlueprintType ~= nil and Position ~= nil) then
						ReplicatedStorage.PlaceStructure.ClientPlacedBlueprint:FireServer(BlueprintType, Position, nil, SelectedStructure)
					end
				end
			end
		end)
	end)
end)
        
        
            local Tab = Window:NewTab("Dupe")
        local Section = Tab:NewSection("Dupe")
        
        
        	-- // Exploit Check
	if not getsenv or not checkcaller or not hookmetamethod or not debug or not debug.setupvalue or not debug.getupvalue then
		return game:GetService("Players").LocalPlayer:Kick("Exploit not supported.")
	end

	if oldHooks then
		local nc, ni = clonefunction(oldHooks.namecall), clonefunction(oldHooks.newindex)
		hookmetamethod(game, "__namecall", function(...) return nc(...) end)
		hookmetamethod(game, "__newindex", function(...) return ni(...) end)
		getgenv().oldHooks = nil
	end

	-- // Variables
	local flags = {
		ws = 16,
		jp = 50,
		dupeInventory = false,
		dupePickup = false,
		dupeMode = false,
		dupeMoney = false,
		dupeSlot = 1
	}

	local UI, dupeModeToggle
	local gs = function(service) return game:GetService(service) end
	local players = gs("Players")
	local client = players.LocalPlayer
	local connections = {}

	connections[1] = client.CharacterAdded:Connect(function(character)
		character:WaitForChild("HumanoidRootPart")
		character.Humanoid.JumpPower = flags.jp
		character.Humanoid.WalkSpeed = flags.ws
	end)

	-- // Remote Grabber
	local remotes = {
		events = {},
		functions = {}
	}

	local gameDescendants = game:GetDescendants()
	for i=1, #gameDescendants do
		local v = gameDescendants[i]
		local dir = (v.ClassName == "RemoteEvent" and "events" or v.ClassName == "RemoteFunction" and "functions")
		if dir then 
			remotes[dir][v.Name] = v 
		end
	end

	-- // Functions

	-- [[ Using numerical loops is quicker than regular table.foreach & iterating over pairs apparently, source: Ancestor ]] --
	local table_foreach = function(table, callback)
		for i=1,#table do
			callback(i, table[i])
		end
	end

	-- [[ Utilities ]] --
	local getCFrame = function(part)
		local part = part or (client.Character and client.Character.HumanoidRootPart)
		if not part then return end
		return part.CFrame
	end

	local getPosition = function(part)
		return getCFrame(part).Position
	end

	local tp = function(pos)
		local pos = pos or client:GetMouse().Hit + Vector3.new(0, client.Character.HumanoidRootPart.Size.Y, 0)
		if typeof(pos) == "CFrame" then
			client.Character:SetPrimaryPartCFrame(pos)
		elseif typeof(pos) == "Vector3" then
			client.Character:MoveTo(pos)
		end
	end

	-- [[ Land Functions ]] --
	local propertyPurchasingEnv = getsenv(client.PlayerGui.PropertyPurchasingGUI.PropertyPurchasingClient)
	local oldPurchaseMode = propertyPurchasingEnv.enterPurchaseMode

	local getProperty = function(firstPlot)
		local properties = {}
		table_foreach(gs("Workspace").Properties:GetChildren(), function(i, v)
			if v:FindFirstChild("Owner") and v.Owner.Value == nil then
				properties[#properties + 1] = v
			end
		end)
		return properties[(firstPlot == true and 1) or (firstPlot == "donate" and #properties) or math.random(2, #properties)]
	end

	local getPlrProperty = function(plr)
		local plr = plr or client
		local plot
		table_foreach(gs("Workspace").Properties:GetChildren(), function(i, v)
			if v:FindFirstChild("Owner") and v.Owner.Value == plr then
				plot = v
			end
		end)
		return plot
	end

	local saveSlot = function()
		if client.CurrentSaveSlot.Value == -1 then return end
		return remotes.functions.RequestSave:InvokeServer(client.CurrentSaveSlot.Value, client)
	end

	local canLoad = function() 
		return remotes.functions.ClientMayLoad:InvokeServer() 
	end


	-- [[ Fast Load ]] --
	local loadSlot = function(slot, plot)
		repeat wait() until canLoad()
		propertyPurchasingEnv.enterPurchaseMode = function(...)
			debug.setupvalue(propertyPurchasingEnv.rotate, 3, 69)
			debug.setupvalue(oldPurchaseMode, 10, plot)
			return
		end
		remotes.functions.RequestLoad:InvokeServer(slot, client)
		propertyPurchasingEnv.enterPurchaseMode = oldPurchaseMode
	end

	-- [[ Free Land ]] --
	local freeLand = function(donatingPlot)
		if getPlrProperty() then
			UI.Banner({
				Text = "You already have a piece of land!"
			})
			return false
		end

		local property = getProperty(donatingPlot)
		remotes.functions.SetPropertyPurchasingValue:InvokeServer(true)
		remotes.events.ClientPurchasedProperty:FireServer(property, property.OriginSquare.Position)
		remotes.functions.SetPropertyPurchasingValue:InvokeServer(false)
		tp(property.OriginSquare.Position)
		return true
	end


	-- [[ Donate Plot ]] --
	local donatePlot = function(slotNum)
		local slotNum = math.clamp(slotNum, 1, 6)
		if getPlrProperty() then 
			return UI.Banner({
				Text = "Please unload your slot & try again."
			})
		end
		task.delay(0.1, function()
			freeLand(true)
		end)
		loadSlot(slotNum, getProperty("donate"))
		UI.Banner({
			Text = "Slot loaded, waiting for reload cooldown."
		})
		repeat wait(1) until canLoad()
		UI.Banner({
			Text = "Unloading slot, please wait."
		})
		remotes.functions.ClientSetListPlayer:InvokeServer(client.WhitelistFolder, client, true)
		remotes.functions.RequestLoad:InvokeServer(-1)
		UI.Banner({
			Text = "Success! Whitelist your friend & tell them to load over top of your base."
		})
		remotes.functions.ClientSetListPlayer:InvokeServer(client.WhitelistFolder, client, false)
	end
        


Section:NewSlider("Slot to dupe", "SliderInfo", 6, 1, function(value) -- 500 (MaxValue) | 0 (MinValue)
    flags.dupeSlot = value
end)

Section:NewButton("Donate Dupe", "ButtonInfo", function()
    donatePlot(flags.dupeSlot)
end)
        
        
        
        
        
        Section:NewToggle("Disable Slot Save", "True off save for your base", function(state)
    if state then
        
        game.StarterGui:SetCore("SendNotification", {
    Title = 'Slot Saveing Disable';
    Text = "Your slot is not loaded in for the game";
    Icon = "rbxassetid://7924662383";
    Duration = 7;
})
wait()
        getgenv().NoSave = true

-- Save Source --

local OldNamecall
OldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local args = {...}
        local method = getnamecallmethod()

        if tostring(self) == "RequestSave" and getnamecallmethod() == "InvokeServer" and getgenv().NoSave then
            return wait()
        end 

return OldNamecall(self, ...)
end)
    else
        game.StarterGui:SetCore("SendNotification", {
    Title = 'Slot Saveing Enabled';
    Text = "Your slot is back to normal";
    Icon = "rbxassetid://7924662383";
    Duration = 7;
})

        getgenv().NoSave = false
    end
end)
































 local Tab = Window:NewTab("Player")
    local Section = Tab:NewSection("Player")
    
    
    Section:NewSlider("SliderText", "SliderInfo", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
while true do
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s --if you want, you can change 100 to a different number :p

wait()
end
end)
    
    
    Section:NewSlider("Jump Power", "Fucking weeee", 500, 50, function(s) 
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = s
end)

Section:NewButton("InfiniteJump", "Jump Infinite", function()
    InfiniteJumpEnabled = true
        game:GetService("UserInputService").JumpRequest:connect(function()
	    if InfiniteJumpEnabled then
		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
	    end
    end)
end)
    
    
    
    
    
    
    Section:NewButton("Fly", "Press F to use", function()
        
      
        
        game.StarterGui:SetCore("SendNotification", {
    Title = 'Fly';
    Text = "Press F to Toggle fly";
    Icon = "rbxassetid://7924662383";
    Duration = 7;
})
        
        
        
    repeat wait() 
	until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Torso") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
local mouse = game.Players.LocalPlayer:GetMouse() 
repeat wait() until mouse
local plr = game.Players.LocalPlayer 
local torso = plr.Character.Torso 
local flying = false
local deb = true 
local ctrl = {f = 0, b = 0, l = 0, r = 0} 
local lastctrl = {f = 0, b = 0, l = 0, r = 0} 
local maxspeed = 50 
local speed = 0

function Fly() 
local bg = Instance.new("BodyGyro", torso) 
bg.P = 9e4 
bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
bg.cframe = torso.CFrame 
local bv = Instance.new("BodyVelocity", torso) 
bv.velocity = Vector3.new(0,0,0) 
bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
repeat wait() 
plr.Character.Humanoid.PlatformStand = true 
if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
speed = speed+.5+(speed/maxspeed) 
if speed > maxspeed then 
speed = maxspeed 
end 
elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
speed = speed-1 
if speed < 0 then 
speed = 0 
end 
end 
if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
else 
bv.velocity = Vector3.new(0,0,0) 
end 
bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*1*speed/maxspeed),0,0) 
until not flying 
ctrl = {f = 0, b = 0, l = 0, r = 0} 
lastctrl = {f = 0, b = 0, l = 0, r = 0} 
speed = 0 
bg:Destroy() 
bv:Destroy() 
plr.Character.Humanoid.PlatformStand = false 
end 
mouse.KeyDown:connect(function(key) 
if key:lower() == "f" then 
if flying then flying = false 
else 
flying = true 
Fly() 
end 
elseif key:lower() == "w" then 
ctrl.f = 10
elseif key:lower() == "s" then 
ctrl.b = -5 
elseif key:lower() == "a" then 
ctrl.l = -5
elseif key:lower() == "d" then 
ctrl.r = 5
end 
end) 
mouse.KeyUp:connect(function(key) 
if key:lower() == "w" then 
ctrl.f = 0 
elseif key:lower() == "s" then 
ctrl.b = 0 
elseif key:lower() == "a" then 
ctrl.l = 0 
elseif key:lower() == "d" then 
ctrl.r = 0 
end 
end)
Fly()
end)



Section:NewButton("Noclip", "ButtonInfo", function()
    	local noclipplayer = game:GetService("Players").LocalPlayer
	local noclipmouse = noclipplayer:GetMouse()

game.StarterGui:SetCore("SendNotification", {
    Title = 'Noclip';
    Text = "Press V to toggle Noclip";
    Icon = "rbxassetid://7924662383";
    Duration = 7;
})

	local donoclip = false
	local noclip = false

	function b_noclip(key)
		if (key == "v") then
			if noclip == false then
				donoclip = true

				noclip = true
			elseif noclip == true then
				donoclip = false

				noclip = false
			end
		end
	end
end)


	noclipmouse.KeyDown:connect(b_noclip)

	game:GetService("Players").LocalPlayer.Character.Head.Touched:connect(function(obj)
		if obj ~= workspace.Terrain then
			if donoclip == true then
				obj.CanCollide = false
			else
				obj.CanCollide = true
			end
		end
	end)



